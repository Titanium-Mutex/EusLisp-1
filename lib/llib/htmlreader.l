;; HTML tagged text reader
;; htmlreader.l
;; 2021-11-5 Toshihiro Matsui, Tsukuba, Japan
;; (instance html-reader :init <file-name>)
;; (send (instance html-reader :init <file-name>) :read)
;; result:
;; ("text" (tag param param) (tag (= param value) param (= param value)) ...)
;;


(setq *html-readtable* (copy-readtable))
(set-syntax-from-char #\> #\) *html-readtable*)
(set-syntax-from-char #\= #\) *html-readtable*)

(defclass html-reader :super propertied-object
	:slots (instream collecting eof ch line buf document))

(defmethod html-reader
 (:init (fname) 
    (setq instream (open fname))
    (setq collecting t eof :EOF)
    (setq ch #\space line nil document nil) 
    self)	
 (:reset () (send instream :reset) (setq document nil) self)
 (:read-line () (read-line self))
 (:read-char ()
    (setq ch (read-char instream nil eof))
    ch)
 (:skip-blank ()
   (while (memq  (send self :read-char)
		 '(#\space #\newline #\tab)) 
	;; (format t ":skip-blank ch=~s~%" ch)
	)
   ch)  
 (:read-tagparam ()
    (send self :skip-blank)
    (let ((*readtable* *html-readtable*)
	  (token1) )
	;; (format t ":read-tagparam while ch=~s~%" ch)
	(unread-char ch instream)
	(setq token1 (read instream))
	(print token1)
	(send self :skip-blank)
	(cond
	      ((memq ch (list #\> :eof))  token1)
	      ((= ch #\=) 
		(list '= token1 (read instream)))
	      (t  token1))	
    )  )
 (:read-tag ()
   (let ((tags) (tag)
	 (*readtable* *html-readtable*))
      (setq tag (read instream nil eof))
      (send self :skip-blank)
      (while (not (memq ch '(#\> :eof)))
	   ;; (format t "read-tag ch=~s~%" ch)
	   (unread-char ch instream)
	   (push (send self :read-tagparam) tags)
	   (send self :skip-blank)
	   )
      (send self :read-char)
      (cons tag (nreverse tags))))
 (:read ()
   (while (not (eq (send self :read-char) eof))
        ;; (format t ":read ch=~s~%" ch)
	(cond ((eql ch #\<)
		   (push (coerce (nreverse line) string) document)
		   (setq line nil)
		   (push (send self :read-tag) document))
	       ((eql ch #\newline)
		   (push (coerce (nreverse line) string) document)
		   (setq line nil)
		   )
	       (t (push ch line) )	)
	 )
      (nreverse document)
     )
    

(defun read-tagbody (ins)
   (while (memq  (setq ch (read-char ins)) '(#\space #\newline #\tab)) )
   (unread-char ch ins)	
   

(defun read-tag (ins)
   (let ((tags) (tag) (ch #\space)
	 (*readtable* *html-readtable*))
      (while (not (eql ch #\>))
	   (push (read ins) tags)
	   (while (memq  (setq ch (read-char ins)) '(#\space #\newline #\tab)) )
	   (unread-char ch ins)	
	   )
      (read-char ins)
      (nreverse tags)))
	
(defun read-html (file)
   (let ((document)
	 (ins (open file))
	 (collecting t)
	 (line)
	 (ch)
	 (eof (cons nil nil))
	 )
      (while (not (eq (setq ch (read-char ins nil eof)) eof))
	  (cond (collecting
		 (cond ((eql ch #\<)
			;   (setq collecting nil)
			   (push (coerce (nreverse line) string) document)
			   (setq line nil)
			   (push (read-tag ins) document))
		       ((eql ch #\newline)
			   (push (coerce (nreverse line) string) document)
			   (setq line nil)
			   )
		       (t (push ch line) )	)
		 )
		(t "???"))
		)
      (nreverse document)
     )
   )

	